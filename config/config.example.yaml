# リアルタイムOCRアプリケーション - サンプル設定ファイル
# このファイルをコピーして config.yaml として使用できます
# 注意: 現在のバージョンでは、設定は src/config.py で管理されています
# このファイルは将来的なYAML設定サポートのためのテンプレートです

# ==========================================
# モデル設定
# ==========================================

model:
  # YOLOv8モデルファイルのパス
  # 学習済みモデル（best.pt）を配置してください
  path: "models/best.pt"
  
  # 検出の信頼度しきい値（0.0-1.0）
  # 値が高いほど、確実な検出のみを採用します
  # 推奨値: 0.5-0.7
  confidence_threshold: 0.6

# ==========================================
# ウィンドウキャプチャ設定
# ==========================================

window:
  # キャプチャ対象のウィンドウタイトル（部分一致）
  # 例: "iPhone", "Simulator", "QuickTime"
  # 利用可能なウィンドウは起動時にリスト表示されます
  target_title: "iPhone"

# ==========================================
# OCR設定
# ==========================================

ocr:
  # OCR言語コード
  # 日本語: "jpn"
  # 英語: "eng"
  # 複数言語: "jpn+eng"
  # 注意: 対応言語はTesseractのインストール時に追加する必要があります
  language: "jpn"
  
  # 切り出し時のマージン（ピクセル）
  # バウンディングボックスの周囲に追加する余白
  # OCR精度向上のため、適度なマージンを設定します
  # 推奨値: 3-10
  margin: 5
  
  # 有効と見なす最小テキスト長（文字数）
  # この値より短いテキストは無視されます
  # ノイズ除去に有効です
  # 推奨値: 2-5
  min_text_length: 2

# ==========================================
# 出力設定
# ==========================================

output:
  # 出力CSVファイルのパス
  # 相対パスまたは絶対パスを指定できます
  # ディレクトリが存在しない場合は自動的に作成されます
  csv_path: "output/book_data_realtime.csv"
  
  # CSV出力時のエンコーディング
  # 日本語を含む場合は "utf-8" を推奨
  encoding: "utf-8"

# ==========================================
# 表示設定
# ==========================================

display:
  # プレビューウィンドウの名前
  window_name: "Real-time Detection"
  
  # バウンディングボックスの色（BGR形式）
  # 緑色: [0, 255, 0]
  # 赤色: [0, 0, 255]
  # 青色: [255, 0, 0]
  bbox_color: [0, 255, 0]
  
  # バウンディングボックスの線の太さ（ピクセル）
  bbox_thickness: 2

# ==========================================
# パフォーマンス設定
# ==========================================

performance:
  # Apple Silicon (M1/M2/M3) でMPSを使用するか
  # true: GPU加速を使用（推奨）
  # false: CPUのみを使用
  use_mps: true
  
  # フレーム処理の遅延（ミリ秒）
  # 値を大きくするとCPU使用率が下がりますが、応答性が低下します
  # 推奨値: 1-100
  frame_delay_ms: 1

# ==========================================
# デバッグ設定
# ==========================================

debug:
  # 詳細ログを出力するか
  verbose: false
  
  # 検出結果を画像ファイルとして保存するか
  save_detection_images: false
  
  # 検出画像の保存先ディレクトリ
  detection_images_dir: "output/debug"

# ==========================================
# 環境変数での設定上書き
# ==========================================
# 以下の環境変数を設定することで、設定を上書きできます:
#
# OCR_MODEL_PATH           - モデルファイルのパス
# OCR_CONFIDENCE_THRESHOLD - 信頼度しきい値
# OCR_WINDOW_TITLE         - ターゲットウィンドウタイトル
# OCR_LANG                 - OCR言語
# OCR_MARGIN               - OCRマージン
# OCR_MIN_TEXT_LENGTH      - 最小テキスト長
# OCR_OUTPUT_CSV           - 出力CSVパス
# OCR_DISPLAY_WINDOW       - 表示ウィンドウ名
#
# 例:
# export OCR_WINDOW_TITLE="QuickTime Player"
# export OCR_CONFIDENCE_THRESHOLD=0.7
# python src/realtime_ocr_app.py

# ==========================================
# 使用例
# ==========================================
# 1. このファイルを config.yaml としてコピー
#    cp config/config.example.yaml config/config.yaml
#
# 2. 必要に応じて設定を編集
#
# 3. アプリケーション起動時に設定を読み込む（将来実装予定）
#    python src/realtime_ocr_app.py --config config/config.yaml
#
# 注意: 現在のバージョンでは、src/config.py を直接編集するか、
#       環境変数を使用して設定を変更してください
